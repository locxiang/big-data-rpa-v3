name: "publish"

on:
  push:
    branches:
      - release

# This is the example from the readme.
# On each push to the `release` branch it will create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          # - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
          #   args: ""
          - platform: "windows-latest"
            args: "--target x86_64-pc-windows-msvc"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: Install dependencies (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # 设置 PowerShell 执行策略
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          
          # 下载并安装 npcap SDK
          Write-Host "Installing npcap SDK..." -ForegroundColor Yellow
          $npcapSdkUrl = "https://npcap.com/dist/npcap-sdk-1.15.zip"
          $npcapSdkPath = "$env:TEMP\npcap-sdk.zip"
          try {
            Invoke-WebRequest -Uri $npcapSdkUrl -OutFile $npcapSdkPath -UseBasicParsing
            
            # 解压 SDK
            Expand-Archive -Path $npcapSdkPath -DestinationPath "$env:TEMP\npcap-sdk" -Force
            
            # 创建目录并复制库文件
            $sdkLibPath = "$env:TEMP\npcap-sdk\Lib\x64"
            $sdkIncludePath = "$env:TEMP\npcap-sdk\Include"
            
            if (Test-Path $sdkLibPath) {
              # 设置环境变量
              echo "LIB=$env:LIB;$sdkLibPath" >> $env:GITHUB_ENV
              echo "INCLUDE=$env:INCLUDE;$sdkIncludePath" >> $env:GITHUB_ENV
              echo "NPCAP_SDK_PATH=$env:TEMP\npcap-sdk" >> $env:GITHUB_ENV
              Write-Host "npcap SDK installed successfully" -ForegroundColor Green
            } else {
              Write-Host "Warning: npcap SDK extraction failed" -ForegroundColor Yellow
            }
          } catch {
            Write-Host "Warning: Failed to install npcap SDK: $($_.Exception.Message)" -ForegroundColor Yellow
          }
          
          # 设置静态链接环境变量
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $env:GITHUB_ENV
          
          # 显示环境信息
          Write-Host "Environment setup completed" -ForegroundColor Green
          Write-Host "Rust version:" -ForegroundColor Blue
          rustc --version
          Write-Host "Cargo version:" -ForegroundColor Blue
          cargo --version

      - name: install frontend dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # Windows 特定环境变量
          RUSTFLAGS: ${{ matrix.platform == 'windows-latest' && '-C target-feature=+crt-static' || '' }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "数字重庆业务数据巡查自动化系统 v__VERSION__"
          releaseBody: |
            ## 版本更新内容
            - 修复 Windows 并行配置问题
            - 优化网络包捕获功能
            - 提升系统兼容性
            
            ## 安装说明
            1. 下载对应平台的安装包
            2. Windows 用户请以管理员身份运行安装程序
            3. 首次运行可能需要安装 Visual C++ 运行时库
            
            ## 系统要求
            - Windows 10/11 (x64)
            - 管理员权限（网络包捕获需要）
            - 至少 4GB 内存
            
            查看完整的安装和使用说明，请下载并查看 README.md 文件。
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
          tauriScript: pnpm tauri